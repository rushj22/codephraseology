<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Soumya\workspace\codeph
raseology\src\unusedImport\testcode.java"><package>package <name>unusedImport</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name
></name>;</import>

<class><specifier>public</specifier> class <name>testcode</name> <block>{

        <comment type="block" format="javadoc">/**
         * @param args
         */</comment>
        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main<
/name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>
</decl></parameter>)</parameter_list> <block>{
                <comment type="line">// TODO Auto-generated method stub</comment>
        <comment type="block">/*        String s=".aru.shi.j;";
                String[] temp = s.split(";");
                int count=0;
                for (String si : temp)
                {
                        System.out.println(si);
                        System.out.println(temp[count]);
                        count++;
                }*/</comment>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><na
me>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name>
</argument>&gt;</argument_list></name></type> <name>splitStore</name> <init>= <expr><operator>new</operator> <call><name
><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>ArrayList</name><argument_list type="gene
ric">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argum
ent_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Str
ing</name></argument>&gt;</argument_list></name></type> <name>inner</name> <init>= <expr><operator>new</operator> <call>
<name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_lis
t></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>inner</name><operator>.</operator><name>add</name></name><argument_li
st>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inner</name><operator>.</operator><name>add</name></name><argument_li
st>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>splitStore</name><operator>.</operator><name>add</name></name><argume
nt_list>(<argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>inner</name> <operator>=</operator> <operator>new</operator> <call><name><name>Ar
rayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argu
ment_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inner</name><operator>.</operator><name>add</name></name><argument_li
st>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inner</name><operator>.</operator><name>add</name></name><argument_li
st>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>splitStore</name><operator>.</operator><name>add</name></name><argume
nt_list>(<argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for<control>(<init><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argum
ent><name>String</name></argument>&gt;</argument_list></name></type> <name>inner1</name> <range>: <expr><name>splitStore
</name></expr></range></decl></init>)</control> <block>{
                <for>for<control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>inner
1</name></expr></range></decl></init>)</control>
                <block>{
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>
.</operator><name>println</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list>
</call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></function>

}</block></class>
</unit>